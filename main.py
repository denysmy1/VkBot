from vk_api.bot_longpoll import VkBotLongPoll
from vk_api.bot_longpoll import VkBotEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import vk_api
import requests
import subprocess
import json
import re
from tram import Tram
import tram_rasp


class Server:

    def __init__(self, api_token, group_id, server_name: str = "Empty"):
        self.group_id = # –∞–π–¥–∏ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ integer

        self.api_token = "–í–∞—à —Ç–æ–∫–µ–Ω"
        # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –∏–º—è
        self.server_name = server_name

        # –î–ª—è Long Poll
        self.vk = vk_api.VkApi(token=api_token)

        # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Long Poll API
        self.long_poll = VkBotLongPoll(self.vk, group_id, wait=100)

        # –î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ vk_api
        self.vk_api = self.vk.get_api()

        self.valutes = ["–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä", "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç", "–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ –°–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞",
                        "–ê—Ä–º—è–Ω—Å–∫–∏—Ö –¥—Ä–∞–º–æ–≤", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å", "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ª–µ–≤", "–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª",
                        "–í–µ–Ω–≥–µ—Ä—Å–∫–∏—Ö —Ñ–æ—Ä–∏–Ω—Ç–æ–≤",
                        "–ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏—Ö –¥–æ–ª–ª–∞—Ä–æ–≤",
                        "–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞", "–î–æ–ª–ª–∞—Ä –°–®–ê", "–ï–≤—Ä–æ", "–ò–Ω–¥–∏–π—Å–∫–∏—Ö —Ä—É–ø–∏–π", "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö —Ç–µ–Ω–≥–µ",
                        "–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
                        "–ö–∏—Ä–≥–∏–∑—Å–∫–∏—Ö —Å–æ–º–æ–≤", "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å", "–ú–æ–ª–¥–∞–≤—Å–∫–∏—Ö –ª–µ–µ–≤", "–ù–æ—Ä–≤–µ–∂—Å–∫–∏—Ö –∫—Ä–æ–Ω", "–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π",
                        "–†—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π", "–°–î–† - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è", "–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
                        "–¢–∞–¥–∂–∏–∫—Å–∫–∏—Ö —Å–æ–º–æ–Ω–∏", "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞", "–ù–æ–≤—ã–π —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç", "–£–∑–±–µ–∫—Å–∫–∏—Ö —Å—É–º–æ–≤",
                        "–£–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –≥—Ä–∏–≤–µ–Ω", "–ß–µ—à—Å–∫–∏—Ö –∫—Ä–æ–Ω", "–®–≤–µ–¥—Å–∫–∏—Ö –∫—Ä–æ–Ω", "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
                        "–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ä—ç–Ω–¥–æ–≤",
                        "–í–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–æ—Ä–µ—è", "–Ø–ø–æ–Ω—Å–∫–∏—Ö –∏–µ–Ω"]
        self.valuteskod = ["AUD", "AZN", "GBP", "AMD", "BYN", "BGN", "BRL", "HUF", "HKD", "DKK", "USD", "EUR", "INR",
                           "KZT",
                           "CAD", "KGS", "CNY", "MDL", "NOK", "PLN ", "RON", "XDR", "SGD", "TJS", "TRY", "TMT", "UZS",
                           "UAH",
                           "CZK", "SEK", "CHF", "ZAR", "KRW", "JPY"]
        self.citys = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
                      "–†–æ—Å—Ç–æ–≤-–ù–∞-–î–æ–Ω—É"]

        self.keyboard = VkKeyboard(one_time=True)
        self.keyboard.add_button('–ü–æ–≥–æ–¥–∞‚ùÑ‚õàüå§', color=VkKeyboardColor.PRIMARY)
        self.keyboard.add_button('–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å', color=VkKeyboardColor.PRIMARY)
        self.keyboard.add_line()
        self.keyboard.add_button('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', color=VkKeyboardColor.POSITIVE)
        self.keyboard.add_button('–ö—É—Ä—Å –≤–∞–ª—é—Ç', color=VkKeyboardColor.POSITIVE)
        self.keyboard.add_line()
        self.keyboard.add_location_button()

        self.raspis = VkKeyboard(one_time=True)
        self.raspis.add_button('–ú–æ—Å–∫–≤–∞', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_button('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_line()
        self.raspis.add_button('–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_button('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_line()
        self.raspis.add_button('–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_button('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_line()
        self.raspis.add_button('–†–æ—Å—Ç–æ–≤-–ù–∞-–î–æ–Ω—É', color=VkKeyboardColor.PRIMARY)
        self.raspis.add_line()
        self.raspis.add_button('–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', color=VkKeyboardColor.SECONDARY)
        self.raspis.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.SECONDARY)

        self.moneykb = VkKeyboard(one_time=True)
        self.moneykb.add_button('–î–æ–ª–ª–∞—Ä –°–®–ê –∏ –ï–≤—Ä–æ', color=VkKeyboardColor.PRIMARY)
        self.moneykb.add_button('–ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞', color=VkKeyboardColor.PRIMARY)
        self.moneykb.add_line()
        self.moneykb.add_button('–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', color=VkKeyboardColor.POSITIVE)
        self.moneykb.add_line()
        self.moneykb.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.SECONDARY)

        self.kblist1 = VkKeyboard(one_time=True)
        self.kblist1.add_button('–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤ –°–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–ê—Ä–º—è–Ω—Å–∫–∏—Ö –¥—Ä–∞–º–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π –ª–µ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–ì–æ–Ω–∫–æ–Ω–≥—Å–∫–∏—Ö –¥–æ–ª–ª–∞—Ä–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–î–∞—Ç—Å–∫–∞—è –∫—Ä–æ–Ω–∞', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–î–æ–ª–ª–∞—Ä –°–®–ê', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–ï–≤—Ä–æ', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–ò–Ω–¥–∏–π—Å–∫–∏—Ö —Ä—É–ø–∏–π', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö —Ç–µ–Ω–≥–µ', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_line()
        self.kblist1.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.PRIMARY)
        self.kblist1.add_button('–î–∞–ª–µ–µ', color=VkKeyboardColor.PRIMARY)

        self.kblist2 = VkKeyboard(one_time=True)
        self.kblist2.add_button('–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö —Ç–µ–Ω–≥–µ', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–ö–∏—Ä–≥–∏–∑—Å–∫–∏—Ö —Å–æ–º–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–í–µ–Ω–≥–µ—Ä—Å–∫–∏—Ö —Ñ–æ—Ä–∏–Ω—Ç–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–ú–æ–ª–¥–∞–≤—Å–∫–∏—Ö –ª–µ–µ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–ù–æ—Ä–≤–µ–∂—Å–∫–∏—Ö –∫—Ä–æ–Ω', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–†—É–º—ã–Ω—Å–∫–∏–π –ª–µ–π', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–°–î–† - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–¢–∞–¥–∂–∏–∫—Å–∫–∏—Ö —Å–æ–º–æ–Ω–∏', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–ù–æ–≤—ã–π —Ç—É—Ä–∫–º–µ–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–í–µ–Ω–≥–µ—Ä—Å–∫–∏—Ö —Ñ–æ—Ä–∏–Ω—Ç–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–£–∑–±–µ–∫—Å–∫–∏—Ö —Å—É–º–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–£–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –≥—Ä–∏–≤–µ–Ω', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–ß–µ—à—Å–∫–∏—Ö –∫—Ä–æ–Ω', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–®–≤–µ–¥—Å–∫–∏—Ö –∫—Ä–æ–Ω', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_line()
        self.kblist2.add_button('–ùa–∑–∞–¥', color=VkKeyboardColor.PRIMARY)
        self.kblist2.add_button('–î–∞–ªe–µ', color=VkKeyboardColor.PRIMARY)

        self.kblist3 = VkKeyboard(one_time=True)
        self.kblist3.add_button('–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫', color=VkKeyboardColor.PRIMARY)
        self.kblist3.add_button('–Æ–∂–Ω–æ–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ä—ç–Ω–¥–æ–≤', color=VkKeyboardColor.PRIMARY)
        self.kblist3.add_line()
        self.kblist3.add_button('–í–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–æ—Ä–µ—è', color=VkKeyboardColor.PRIMARY)
        self.kblist3.add_button('–Ø–ø–æ–Ω—Å–∫–∏—Ö –∏–µ–Ω', color=VkKeyboardColor.PRIMARY)
        self.kblist3.add_line()
        self.kblist3.add_button('–ù–∞–∑a–¥', color=VkKeyboardColor.PRIMARY)
        self.kblist3.add_button('–ú–µ–Ω—é', color=VkKeyboardColor.PRIMARY)

        self.tram1 = Tram()

    def start(self):
        for event in self.long_poll.listen():  # –°–ª—É—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä

            # –ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if event.type == VkBotEventType.MESSAGE_NEW:
                comand = ""
                wlst = event.object.text.split()
                if len(wlst) == 2:
                    comand = str(wlst[0]).lower()
                print('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ' + str(event.object.text))
                response = event.object.text.lower()
                if event.object.peer_id and not event.object.peer_id < 0 and not event.object.from_me:
                    if response == "–ø–æ–≥–æ–¥–∞‚ùÑ‚õàüå§" or response == "–ø–æ–≥–æ–¥–∞":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id, 'message': "–ì–æ—Ä–æ–¥:",
                                        'random_id': get_random_id(), 'keyboard': self.raspis.get_keyboard()})
                    elif any([re.search(weat, event.object.text) for weat in self.citys]):
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': requests.get(
                                            'https://wttr.in/' + event.object.text + '?format=–ì–æ—Ä–æ–¥: %l ,'
                                                                                     '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: %t%c ,–ü–æ –æ—â—É—â–µ–Ω–∏—é: %f ,'
                                                                                     '–í–µ—Ç–µ—Ä: %w ,–û—Å–∞–¥–∫–∏: %p').text.replace(
                                            ',', '\n'),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞ - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
                                                   " <<–ü–æ–≥–æ–¥–∞ –≥–æ—Ä–æ–¥>>",
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif comand == "–ø–æ–≥–æ–¥–∞" and len(wlst) == 2:
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id, 'message': weather(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': news(),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–∫—É—Ä—Å –≤–∞–ª—é—Ç":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É",
                                        'random_id': get_random_id(), 'keyboard': self.moneykb.get_keyboard()})
                    elif response == "–¥–æ–ª–ª–∞—Ä —Å—à–∞ –∏ –µ–≤—Ä–æ":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': self.money(),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "—Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞1",
                                        'random_id': get_random_id(), 'keyboard': self.kblist1.get_keyboard()})
                    elif response == "–¥–∞–ª–µ–µ":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2",
                                        'random_id': get_random_id(), 'keyboard': self.kblist2.get_keyboard()})
                    elif response == "–¥–∞–ªe–µ":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3",
                                        'random_id': get_random_id(), 'keyboard': self.kblist3.get_keyboard()})
                    elif response == "–¥–∞–ª–µe":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 4",
                                        'random_id': get_random_id(), 'keyboard': self.kblist4.get_keyboard()})
                    elif response == "–Ωa–∑–∞–¥":
                        self.vk.method('messages.send',
                                       {'peer_id': event.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1",
                                        'random_id': get_random_id(), 'keyboard': self.kblist1.get_keyboard()})
                    elif response == "–Ω–∞–∑a–¥":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2",
                                        'random_id': get_random_id(), 'keyboard': self.kblist2.get_keyboard()})
                    elif any([re.search(val, event.object.text) for val in self.valutes]):
                        for num in range(len(self.valutes)):
                            if event.object.text == self.valutes[num]:
                                break
                        nlav = self.valuteskod[num]
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': self.indmoney(nlav),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞":
                        btc = requests.get("https://apirone.com/api/v1/ticker?currency=btc")
                        btc_json = json.loads(btc.text)
                        bt = btc_json['RUB']['last']
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "BTC –∫ RUB = " + str(round(bt, 4)),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ì–æ—Ä–æ–¥",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.t_k_rasp.get_keyboard()})
                    elif response == "—Ç—Ä–∞–º–≤–∞–π":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.t_k_marsh.get_keyboard()})
                    elif response == "k—Ä–∞—Å–Ω–æ–¥–∞—Ä":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.rasp.get_keyboard()})
                    elif comand == "–∫—Ç":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.start(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–≤–µ—Ä–Ω—É—Ç—å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.rasp.get_keyboard()})
                    elif response == "—Ç—Ä–æ–ª–ª–µ–π–±—É—Å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.tl_k_marsh.get_keyboard()})
                    elif comand == "–∫—Ç–ª":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.krastrolleybus(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–∞–≤—Ç–æ–±—É—Å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_k_marsh.get_keyboard()})
                    elif comand == "–∞—Ç":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.krasbus(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "—Äo—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.raspr.get_keyboard()})
                    elif response == "a–≤—Ç–æ–±—É—Å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh.get_keyboard()})
                    elif comand == "–∞—Ä":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.rastbus(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–¥–∞–ª—å—àe":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh2.get_keyboard()})
                    elif response == "–¥a–ª—å—à–µ":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh3.get_keyboard()})
                    elif response == "–≤–ø–µ—Ä–µ–¥":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 4",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh4.get_keyboard()})
                    elif response == "–≤e—Ä–Ω—É—Ç—å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh.get_keyboard()})
                    elif response == "b–µ—Ä–Ω—É—Ç—å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh2.get_keyboard()})
                    elif response == "be—Ä–Ω—É—Ç—å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.b_r_marsh3.get_keyboard()})
                    elif response == "t—Ä–æ–ª–ª–µ–π–±—É—Å":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.tl_r_marsh.get_keyboard()})
                    elif comand == "—Ç–ª—Ä":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.rastrolleubus(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "t—Ä–∞–º–≤–∞–π":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.t_r_marsh.get_keyboard()})
                    elif comand == "—Ç—Ä":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.rastram(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    elif response == "–º–µ–∂–≥–æ—Ä–æ–¥—Å–∫–æ–π":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–ú–∞—Ä—à—Ä—É—Ç",
                                        'random_id': get_random_id(), 'keyboard': self.tram1.no_city_rast.get_keyboard()})
                    elif comand == "–º–≥—Ä":
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': tram_rasp.mrast(wlst[1]),
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})
                    else:
                        self.vk.method('messages.send',
                                       {'peer_id': event.object.peer_id,
                                        'message': "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                                        'random_id': get_random_id(), 'keyboard': self.keyboard.get_keyboard()})


    def money(self):
        mny = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
        s = json.loads(mny.text)
        usd = s['Valute']['USD']['Value']
        eur = s['Valute']['EUR']['Value']
        raznusd = s['Valute']['USD']['Value'] - s['Valute']['USD']['Previous']
        razneur = s['Valute']['EUR']['Value'] - s['Valute']['EUR']['Previous']
        if raznusd > 0:
            endusd = s['Valute']['USD']['Name'] + " " + str(round(usd, 4)) + " ‚¨Ü " + str(round(raznusd, 4))
        else:
            endusd = s['Valute']['USD']['Name'] + " " + str(round(usd, 4)) + " ‚¨á " + str(round(raznusd, 4))
        if razneur > 0:
            endeur = s['Valute']['EUR']['Name'] + " " + str(round(eur, 4)) + " ‚¨Ü " + str(round(razneur, 4))
        else:
            endeur = s['Valute']['EUR']['Name'] + " " + str(round(eur, 4)) + " ‚¨á " + str(round(razneur, 4))
        endmoney = endusd + "\n" + endeur
        return endmoney

    def indmoney(self, st):
        mny = requests.get("https://www.cbr-xml-daily.ru/daily_json.js")
        s = json.loads(mny.text)
        val = s['Valute'][st]['Value']
        raznval = s['Valute'][st]['Value'] - s['Valute'][st]['Previous']
        if raznval > 0:
            endval = s['Valute'][st]['Name'] + " " + str(round(val, 4)) + " ‚¨Ü " + str(round(raznval, 4))
        else:
            endval = s['Valute'][st]['Name'] + " " + str(round(val, 4)) + " ‚¨á " + str(round(raznval, 4))
        return endval


def weather(s):
    st = s[0]
    s = s.replace(st, st.upper(), 1)
    weath = requests.get('https://wttr.in/' + s + '?format=–ì–æ—Ä–æ–¥: %l ,–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: %t%c ,'
                                                  '–ü–æ –æ—â—É—â–µ–Ω–∏—é: %f ,–í–µ—Ç–µ—Ä: %w ,–û—Å–∞–¥–∫–∏: %p').text

    return weath.replace(',', '\n')


def news():
    new = subprocess.check_output(['./test.sh'])
    return new
